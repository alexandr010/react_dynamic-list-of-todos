{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodos","a","fetch","res","json","getUser","userId","TodoList","state","todos","titleSearch","filterStatus","handleChangeInput","event","setState","target","value","handleChangeSelect","filterTodos","visibleTodos","filter","todo","title","toLowerCase","includes","completed","then","this","props","getUserId","selectedUserId","className","placeholder","type","id","onChange","name","map","classNames","checked","readOnly","onClick","React","Component","CurrentUser","user","loadUser","prevProps","email","phone","clear","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b443c16.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const res = await fetch(`${API_URL}/todos`);\n\n  return res.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const res = await fetch(`${API_URL}/users/${userId}`);\n\n  return res.json();\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/api';\n\ninterface State {\n  todos: Todo[],\n  titleSearch: string,\n  filterStatus: string,\n}\n\ninterface Props {\n  getUserId: (userId: number) => void;\n  selectedUserId: number,\n}\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    titleSearch: '',\n    filterStatus: '',\n  };\n\n  componentDidMount(): void {\n    getTodos()\n      .then(todos => (\n        this.setState({ todos })\n      ));\n  }\n\n  handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleSearch: event.target.value });\n  };\n\n  handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterStatus: event.target.value });\n  };\n\n  filterTodos = () => {\n    const { todos, titleSearch, filterStatus } = this.state;\n    let visibleTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(titleSearch.toLowerCase())\n    ));\n\n    if (filterStatus) {\n      visibleTodos = visibleTodos.filter(todo => {\n        switch (filterStatus) {\n          case 'all':\n            return todo;\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return visibleTodos;\n  };\n\n  render() {\n    const visibleTodos = this.filterTodos();\n    const { titleSearch, filterStatus } = this.state;\n    const { getUserId, selectedUserId } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form className=\"TodoList__form\">\n          <input\n            className=\"TodoList__input\"\n            placeholder=\"Filter todos\"\n            type=\"text\"\n            id=\"input-search\"\n            value={titleSearch}\n            onChange={(event) => this.handleChangeInput(event)}\n          />\n          <select\n            className=\"TodoList__select\"\n            name=\"status\"\n            value={filterStatus}\n            onChange={(event) => this.handleChangeSelect(event)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => getUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ninterface State {\n  user: User | null,\n}\n\ninterface Props {\n  selectedUserId: number,\n  clear: () => void,\n}\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser(this.props.selectedUserId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser(this.props.selectedUserId);\n    }\n  }\n\n  async loadUser(userId: number) {\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n          <button\n            className=\"CurrentUser__clear-btn\"\n            type=\"button\"\n            onClick={this.props.clear}\n          >\n            Clear\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  getUserId = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            getUserId={this.getUserId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}